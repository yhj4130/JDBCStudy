/*===============
   DBConn.java
===============*/

// ※ 싱글톤(Singleton) 디자인 패턴을 이용한 Database 연결 객체 생성 전용 클래스
//	  → DB 연결 과정이 가장 부하가 크기 때문에
//		 한 번 연결된 객체를 계속 사용하는 것이 좋다.

package com.util;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConn
{
	// 변수 선언
	private static Connection dbConn;
	//-- 자동으로 null 초기화
	
	// 메소드 정의 → 연결
	public static Connection getConnection()
	{
		// 한 번 연결된 객체를 계속 사용
		// 즉, 연결되지 않은 경우에만 연결을 시도하겠다는 의미
		// → 싱글톤(디자인 패턴)
		if (dbConn == null)
		{
			try
			{
				String url = "jdbc:oracle:thin:@localhost:1521:xe";
				//-- localhost 는 오라클 서버의 ip 주소를 기재하는 부분
				//   1521은 오라클 Port Number
				//   xe 는 오라틀 SID(Express Edition 은 xe)
				
				String user = "scott";	//-- 오라클 사용자 계정 이름
				String pwd = "tiger";	//-- 오라클 사용자 계정 암호
				
				Class.forName("oracle.jdbc.driver.OracleDriver");
				//-- OracleDriver 클래스에 대한 객체 생성
				
				dbConn = DriverManager.getConnection(url, user, pwd);
				
			} catch (Exception e)
			{
				System.out.println(e.toString());
			}
		}
		
		return dbConn;
	}
	
	// getConnection() 메소드의 오버로딩 → 연결
	public static Connection getConnection(String url, String user, String pwd)
	{
		if (dbConn == null)
		{
			try
			{
				Class.forName("oacle.jdbc.driver.OracleDriver");
				dbConn = DriverManager.getConnection(url, user, pwd);
			} catch(Exception e)
			{
				System.out.println(e.toString());
			}
		}
		
		return dbConn;
	}
	
	// 메소드 정의 → 연결 종료
	public static void close()
	{
		if (dbConn != null)
		{      
			try
			{
				if(!dbConn.isClosed())
					dbConn.close();
			} catch (Exception e)
			{
				System.out.println(e.toString());
			}
		}
		
		dbConn = null;
	}
}
